// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["orderByRelation"]
}

/// Holds the Characters of karst.
model Character {
  id                Int                 @id @default(autoincrement())
  name              String
  /// Short bio of the character
  about             String?
  folk              String
  level             Int
  coins             Int
  abilities         CharacterAbility[]
  knacks            CharacterKnack[]
  items             CharacterItem[]
  player            User?               @relation(fields: [playerId], references: [id])
  playerId          Int?                @map(name: "player_id")
  campaignCharacter CampaignCharacter[]
  createdAt    DateTime @default(now()) @map(name: "created_at")
  updatedAt    DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "characters")
}

/// Abilities of a character such as "Strong", "Quick" or "Tough"
model CharacterAbility {
  id           Int        @id @default(autoincrement())
  name         String
  character    Character? @relation(fields: [characterId], references: [id])
  characterId  Int?     @map(name: "character_id")
  createdAt    DateTime @default(now()) @map(name: "created_at")
  updatedAt    DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "character_abilities")
}

/// Knacks of a character, like spellcasting, focus, climbing walls, etc.
model CharacterKnack {
  id           Int        @id @default(autoincrement())
  name         String
  character    Character? @relation(fields: [characterId], references: [id])
  characterId  Int?       @map(name: "character_id")
  createdAt    DateTime   @default(now()) @map(name: "created_at")
  updatedAt    DateTime   @default(now()) @map(name: "updated_at")

  @@map(name: "character_knacks")
}

/// Items in the game - they represent individual objects, not classes or types of objects. Usually associated to a character.
model CharacterItem {
  id           Int        @id @default(autoincrement())
  name         String
  character    Character? @relation(fields: [characterId], references: [id])
  characterId  Int?       @map(name: "character_id")
  createdAt    DateTime   @default(now()) @map(name: "created_at")
  updatedAt    DateTime   @default(now()) @map(name: "updated_at")

  @@map(name: "character_items")
}

/// Many to many link from characters to campaigns
model CampaignCharacter {
  id          Int       @id @default(autoincrement())
  character   Character @relation(fields: [characterId], references: [id])
  characterId Int       @map(name: "character_id")
  campaign    Campaign  @relation(fields: [campaignId], references: [id])
  campaignId  Int       @map(name: "campaign_id")
  createdAt    DateTime @default(now()) @map(name: "created_at")
  updatedAt    DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "campaign_characters")
}

/// A shared story involving characters and players
model Campaign {
  id           Int                 @id @default(autoincrement())
  title        String
  shared       Boolean             @default(false)
  entries      JournalEntry[]
  users        CampaignUser[]
  characters   CampaignCharacter[]
  createdAt    DateTime @default(now()) @map(name: "created_at")
  updatedAt    DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "campaigns")
}

/// A journal entry, usually associated to a campaign but could also be made by a user
model JournalEntry {
  id           Int       @id @default(autoincrement())
  title        String
  content      String?
  isPublished  Boolean   @default(false) @map(name: "is_published")
  isShared       Boolean   @default(false) @map(name: "is_shared")
  campaign     Campaign? @relation(fields: [campaignId], references: [id])
  campaignId   Int?      @map(name: "campaign_id")
  author       User      @relation(fields: [authorId], references: [id])
  authorId     Int       @map(name: "author_id")
  createdAt    DateTime @default(now()) @map(name: "created_at")
  updatedAt    DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "journal_entries")
}

/// A many-to-many mapping of what players belongs to what campaigns
model CampaignUser {
  id           Int        @id @default(autoincrement())
  /// A role such as participant, GM, spectator, mini-boss...
  role         String
  user         User       @relation(fields: [userId], references: [id])
  userId       Int        @map(name: "user_id")
  campaign     Campaign   @relation(fields: [campaignId], references: [id])
  campaignId   Int        @map(name: "campaign_id")
  createdAt    DateTime   @default(now()) @map(name: "created_at")
  updatedAt    DateTime   @default(now()) @map(name: "updated_at")

  @@map(name: "campaign_users")
}

/// Represents individual users or players
model User {
  id            Int           @id @default(autoincrement())
  name          String?
  email         String?       @unique
  emailVerified Boolean?      @map(name: "email_verified")
  image         String?
  createdAt     DateTime      @default(now()) @map(name: "created_at")
  updatedAt     DateTime      @updatedAt @map(name: "updated_at")
  entries       JournalEntry[]
  characters    Character[]
  campaigns     CampaignUser[]

  @@map(name: "users")
}

/// Provides the SSO interface which associates users with their SSO providers, such as Discord
model Account {
  id                 Int       @id @default(autoincrement())
  compoundId         String    @unique @map(name: "compound_id")
  userId             Int       @map(name: "user_id")
  providerType       String    @map(name: "provider_type")
  providerId         String    @map(name: "provider_id")
  providerAccountId  String    @map(name: "provider_account_id")
  refreshToken       String?   @map(name: "refresh_token")
  accessToken        String?   @map(name: "access_token")
  accessTokenExpires DateTime? @map(name: "access_token_expires")
  createdAt          DateTime  @default(now()) @map(name: "created_at")
  updatedAt          DateTime  @default(now()) @map(name: "updated_at")

  @@index([providerAccountId], name: "provider_account_id")
  @@index([providerId], name: "provider_id")
  @@index([userId], name: "user_id")
  @@map(name: "accounts")
}

/// Cookie that tells the frontend that you're logged in
model Session {
  id           Int      @id @default(autoincrement())
  userId       Int      @map(name: "user_id")
  expires      DateTime
  sessionToken String   @unique @map(name: "session_token")
  accessToken  String   @unique @map(name: "access_token")
  createdAt    DateTime @default(now()) @map(name: "created_at")
  updatedAt    DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "sessions")
}
